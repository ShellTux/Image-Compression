from common import TEST_PARAMETERS
from matplotlib import pyplot as plt
import encoder
import numpy as np

image = plt.imread(TEST_PARAMETERS.image_path)
_, iv = encoder.encoder(
    image,
    downsampling=TEST_PARAMETERS.downsampling,
    quality_factor=TEST_PARAMETERS.quality_factor,
    return_intermidiate_values=True
)

def test_encoder_rgb():
    r = iv.red[8:16, 8:16]
    expected_r = np.array([[209, 212, 210, 208, 208, 210, 210, 207],
                           [209, 210, 210, 208, 208, 210, 210, 208],
                           [209, 211, 211, 210, 210, 211, 212, 210],
                           [210, 212, 212, 212, 212, 215, 215, 213],
                           [212, 213, 213, 215, 215, 216, 216, 216],
                           [216, 214, 216, 217, 217, 217, 217, 217],
                           [219, 218, 218, 221, 221, 218, 218, 218],
                           [223, 220, 220, 223, 223, 219, 219, 219]])
    assert np.array_equal(r, expected_r), f'\n{r}\n!=\n{expected_r}'

def test_encoder_ycbcr():
    y, cb = iv.Y[8:16, 8:16], iv.Cb[8:16, 8:16]

    expected_y = np.array([[222.758, 223.068, 223.057, 223.046, 223.046, 223.057, 223.057, 222.046],
                           [222.758, 223.057, 223.057, 223.046, 223.046, 223.057, 223.057, 223.046],
                           [222.758, 224.057, 224.057, 223.758, 223.758, 224.057, 225.057, 223.758],
                           [224.117, 224.829, 224.829, 224.829, 224.829, 225.84,  225.84,  226.057],
                           [224.829, 225.829, 225.829, 225.84,  225.84,  226.84,  226.84,  226.84 ],
                           [227.313, 226.715, 227.313, 227.025, 227.025, 228.313, 228.313, 227.025],
                           [228.797, 229.085, 229.085, 229.395, 229.036, 229.313, 229.313, 228.025],
                           [231.395, 231.085, 231.085, 230.107, 230.107, 230.085, 230.085, 228.797]])
    assert np.allclose(y, expected_y), f'\n{y}\n!=\n{expected_y}'

    expected_cb = np.array([[136.037, 135.862, 135.869, 135.875, 135.875, 135.869, 135.869, 135.875],
                            [136.037, 135.869, 135.869, 135.875, 135.875, 135.869, 135.869, 135.875],
                            [136.037, 135.869, 135.869, 136.037, 136.037, 135.869, 135.869, 136.037],
                            [134.706, 134.869, 134.869, 134.869, 134.869, 134.862, 134.862, 135.869],
                            [134.869, 134.869, 134.869, 134.862, 134.862, 134.862, 134.862, 134.862],
                            [134.031, 134.369, 134.031, 134.194, 134.194, 134.031, 134.031, 134.194],
                            [133.194, 133.031, 133.031, 132.856, 134.187, 134.031, 134.031, 134.194],
                            [132.856, 133.031, 133.031, 133.019, 133.019, 133.031, 133.031, 133.194]])
    assert np.allclose(cb, expected_cb), f'\n{cb}\n!=\n{expected_cb}'

def test_encoder_downsampling():
    Cb_d = iv.Cb_d[8:16, 8:16]

    expected_Cb_d = np.array([
        [136.037, 135.862, 135.869, 135.875, 135.875, 135.869, 135.869, 135.875],
        [136.037, 135.869, 135.869, 135.875, 135.875, 135.869, 135.869, 135.875],
        [136.037, 135.869, 135.869, 136.037, 136.037, 135.869, 135.869, 136.037],
        [134.706, 134.869, 134.869, 134.869, 134.869, 134.862, 134.862, 135.869],
        [134.869, 134.869, 134.869, 134.862, 134.862, 134.862, 134.862, 134.862],
        [134.031, 134.369, 134.031, 134.194, 134.194, 134.031, 134.031, 134.194],
        [133.194, 133.031, 133.031, 132.856, 134.187, 134.031, 134.031, 134.194],
        [132.856, 133.031, 133.031, 133.019, 133.019, 133.031, 133.031, 133.194],
    ])

    # assert np.allclose(Cb_d, expected_Cb_d), f'\n{Cb_d}\n!=\n{expected_Cb_d}'

def test_encoder_dct():
    Yb_DCT8 = iv.Y_dct8[8:16, 8:16]

    expected_Yb_DCT8 = np.array([
        [ 1.80777663e+03, -9.23242261e-01, -5.29636497e-01,  3.59445648e-01,  -1.76362500e+00,  5.55083588e-01, -2.98406749e-01, -4.60890519e-02],
        [-2.03673479e+01, -9.82171542e-01, -8.86593039e-02, -5.92479366e-01,   2.05786124e-01, -4.40442200e-01, -2.79880553e-01, -8.09695807e-02],
        [ 3.01421591e+00,  2.96358656e+00, -5.05785655e-01,  5.32572109e-01,   2.78262642e-01,  2.64984553e-01, -1.70624815e-01,  4.42421783e-01],
        [-1.55397910e+00, -5.90294119e-01, -2.27573528e-01,  4.87826728e-01,   1.58910590e-01,  2.61243202e-01,  3.27367962e-01, -2.07981922e-01],
        [ 1.15787500e+00,  2.03021506e-01,  2.68178989e-01, -1.23757464e-01,   7.06250000e-02, -4.00909176e-01,  1.85897985e-01, -9.99756393e-02],
        [ 3.91716121e-01, -2.49542185e-01, -3.88121070e-01,  8.46698258e-02,  -1.12999755e-01,  1.77816633e-01, -2.46778824e-01, -1.26352968e-01],
        [ 1.25161893e-01,  2.41893572e-01,  1.28375185e-01,  3.35478925e-01,  -5.71082576e-01,  4.37425155e-01, -4.84643446e-02,  3.97998520e-01],
        [-1.29250561e-01, -1.08042957e-01, -4.65970112e-01, -3.52498952e-01,  -3.18990577e-01, -1.04955260e-01, -5.53132343e-01, -1.24718188e-02],
    ])

    assert np.allclose(Yb_DCT8, expected_Yb_DCT8), f'\n{Yb_DCT8}\n!=\n{expected_Yb_DCT8}'

def test_encoder_quantization():
    Yb_Q = iv.Y_q[8:16, 8:16]

    expected_Yb_Q = np.array([
        [226,   0,   0,   0,   0,   0,   0,   0],
        [ -3,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
    ])

    assert np.allclose(Yb_Q, expected_Yb_Q), f'\n{Yb_Q}\n!=\n{expected_Yb_Q}'

def test_encoder_dpcm():
    Yb_DPCM = iv.Y_dpcm[8:16, 8:16]

    expected_Yb_DPCM = np.array([
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [ -3,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
    ])

    assert np.allclose(Yb_DPCM, expected_Yb_DPCM), f'\n{Yb_DPCM}\n!=\n{expected_Yb_DPCM}'
