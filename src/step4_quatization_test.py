import numpy as np

from common import TEST_PARAMETERS
from step4_quatization import get_quantization_matrix, iquantization, quantization

def test_quantization():
    Yb_DCT8x8 = np.array([
        [ 1.80777663e+03, -9.23242261e-01, -5.29636497e-01,  3.59445648e-01,  -1.76362500e+00,  5.55083588e-01, -2.98406749e-01, -4.60890519e-02],
        [-2.03673479e+01, -9.82171542e-01, -8.86593039e-02, -5.92479366e-01,   2.05786124e-01, -4.40442200e-01, -2.79880553e-01, -8.09695807e-02],
        [ 3.01421591e+00,  2.96358656e+00, -5.05785655e-01,  5.32572109e-01,   2.78262642e-01,  2.64984553e-01, -1.70624815e-01,  4.42421783e-01],
        [-1.55397910e+00, -5.90294119e-01, -2.27573528e-01,  4.87826728e-01,   1.58910590e-01,  2.61243202e-01,  3.27367962e-01, -2.07981922e-01],
        [ 1.15787500e+00,  2.03021506e-01,  2.68178989e-01, -1.23757464e-01,   7.06250000e-02, -4.00909176e-01,  1.85897985e-01, -9.99756393e-02],
        [ 3.91716121e-01, -2.49542185e-01, -3.88121070e-01,  8.46698258e-02,  -1.12999755e-01,  1.77816633e-01, -2.46778824e-01, -1.26352968e-01],
        [ 1.25161893e-01,  2.41893572e-01,  1.28375185e-01,  3.35478925e-01,  -5.71082576e-01,  4.37425155e-01, -4.84643446e-02,  3.97998520e-01],
        [-1.29250561e-01, -1.08042957e-01, -4.65970112e-01, -3.52498952e-01,  -3.18990577e-01, -1.04955260e-01, -5.53132343e-01, -1.24718188e-02],
    ])

    QY = np.array([
        [ 8,  6,  5,  8, 12, 20, 26, 30],
        [ 6,  6,  7, 10, 13, 29, 30, 28],
        [ 7,  6,  8, 12, 20, 28, 34, 28],
        [ 7,  8, 11, 14, 26, 44, 40, 31],
        [ 9, 11, 18, 28, 34, 54, 52, 38],
        [12, 18, 28, 32, 40, 52, 56, 46],
        [24, 32, 39, 44, 52, 60, 60, 50],
        [36, 46, 48, 49, 56, 50, 52, 50],
    ])

    QY_actual = get_quantization_matrix(TEST_PARAMETERS['QUALITY-FACTOR'])

    assert np.array_equal(QY, QY_actual), f'\n{QY}\n!=\n{QY_actual}'

    Yb_Q = np.array([
        [226,   0,   0,   0,   0,   0,   0,   0],
        [ -3,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
    ])

    Yb_Q_actual = quantization(Yb_DCT8x8, quality_factor=TEST_PARAMETERS['QUALITY-FACTOR'])

    assert np.array_equal(Yb_Q, Yb_Q_actual), f'\n{Yb_Q}\n!=\n{Yb_Q_actual}'

def test_inverse_quantization():
    Yb_DCT8x8 = np.array([
        [ 1.80777663e+03, -9.23242261e-01, -5.29636497e-01,  3.59445648e-01,  -1.76362500e+00,  5.55083588e-01, -2.98406749e-01, -4.60890519e-02],
        [-2.03673479e+01, -9.82171542e-01, -8.86593039e-02, -5.92479366e-01,   2.05786124e-01, -4.40442200e-01, -2.79880553e-01, -8.09695807e-02],
        [ 3.01421591e+00,  2.96358656e+00, -5.05785655e-01,  5.32572109e-01,   2.78262642e-01,  2.64984553e-01, -1.70624815e-01,  4.42421783e-01],
        [-1.55397910e+00, -5.90294119e-01, -2.27573528e-01,  4.87826728e-01,   1.58910590e-01,  2.61243202e-01,  3.27367962e-01, -2.07981922e-01],
        [ 1.15787500e+00,  2.03021506e-01,  2.68178989e-01, -1.23757464e-01,   7.06250000e-02, -4.00909176e-01,  1.85897985e-01, -9.99756393e-02],
        [ 3.91716121e-01, -2.49542185e-01, -3.88121070e-01,  8.46698258e-02,  -1.12999755e-01,  1.77816633e-01, -2.46778824e-01, -1.26352968e-01],
        [ 1.25161893e-01,  2.41893572e-01,  1.28375185e-01,  3.35478925e-01,  -5.71082576e-01,  4.37425155e-01, -4.84643446e-02,  3.97998520e-01],
        [-1.29250561e-01, -1.08042957e-01, -4.65970112e-01, -3.52498952e-01,  -3.18990577e-01, -1.04955260e-01, -5.53132343e-01, -1.24718188e-02],
    ])

    Yb_Q = np.array([
        [226,   0,   0,   0,   0,   0,   0,   0],
        [ -3,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0],
    ])

    Yb_DCT8x8_actual = iquantization(Yb_Q, quality_factor=TEST_PARAMETERS['QUALITY-FACTOR'])

    assert np.allclose(Yb_DCT8x8, Yb_DCT8x8_actual, rtol=1e-5), f'\n{Yb_DCT8x8}\n!=\n{Yb_DCT8x8_actual}'
